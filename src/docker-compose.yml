version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  webhost:
    image: ${DOCKER_REGISTRY-}webhost
    build:
      context: .
      dockerfile: ApiGateway/WebHost/Dockerfile
    environment:
      USER_SERVICE_URI: ${USER_SERVICE_URI}
      IAM_SERVICE_URI: ${IAM_SERVICE_URI}
      ORDER_SERVICE_URI: ${ORDER_SERVICE_URI}
      PRODUCT_SERVICE_URI: ${PRODUCT_SERVICE_URI}
      DELIVERY_SERVICE_URI: ${DELIVERY_SERVICE_URI}
      DOTNET_ENVIRONMENT: "Development"
    ports:
      - "8080:8080"
    networks:
      - app-network

  userservice:
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: .
      dockerfile: Services/UserService/UserService.Application/Dockerfile
    ports:
      - "5005:5005"
    networks:
      - app-network
    depends_on:
      - userpostgres

  userpostgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${USER_SERVICE_POSTGRES_DB}
      POSTGRES_USER: ${USER_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
  
  iam_postgres:
    image: postgres:latest
    hostname: iam_postgres
    environment:
      POSTGRES_DB: ${IAM_SERVICE_POSTGRES_DB}
      POSTGRES_USER: ${IAM_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${IAM_SERVICE_POSTGRES_PASSWORD}
    expose:
      - "5435"
    ports:
      - 5435:5435
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks: 
      - app-network
    command: -p 5435

  iam_service:
    image: ${DOCKER_REGISTRY-}iam_service
    environment:
      "DOTNET_ENVIRONMENT": "Development"
    build:
      context: ${IAM_SERVICE_PATH}
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    networks: 
      - app-network

  seq:
    image: datalust/seq:latest
    hostname: seq
    ports:
      - "5341:80"
    environment:
      ACCEPT_EULA: "Y"
    networks: 
      - app-network
    volumes:
      - seq-data:/data

  product_service:
    image: ${DOCKER_REGISTRY-}product_service
    build:
      context: ${PRODUCT_SERVICE_PATH}
      dockerfile: ProductService.Api/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: "Development"
    ports:
      - "50052:50052"
    networks:
      - app-network
    depends_on:
      - "minio"
      - "mongo"

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"  # Для веб-интерфейса
    command: server --console-address ":9001" /data
    volumes:
      - minio_data:/data
    networks:
      - app-network

  mongo:
    image: "mongo"
    ports:
      - "27017:27017"
    networks:
      - app-network

  mongo-ui:
    image: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
    ports:
      - 8081:8081
    networks:
      - app-network
    depends_on:
      - "mongo"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks: 
      - app-network
    ports:
      - 22181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks: 
      - app-network
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    hostname: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks: 
      - app-network
    ports:
      - 8095:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
      - zookeeper
 
  orderservice:
    image: ${DOCKER_REGISTRY-}orderservice
    build:
      context: .
      dockerfile: Services/OrderService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: "Development"
      PRODUCT_POSTGRES_HOST: ${ORDER_POSTGRES_HOST}
      PRODUCT_POSTGRES_PORT: ${ORDER_POSTGRES_PORT}
      PRODUCT_POSTGRES_DB: ${ORDER_POSTGRES_DB}
      PRODUCT_POSTGRES_USER: ${ORDER_POSTGRES_USER}
      PRODUCT_POSTGRES_PASSWORD: ${ORDER_POSTGRES_PASSWORD}
    ports:
      - "50055:50055"
    networks:
      - app-network
    depends_on:
      - order_bd
 
  order_bd:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${ORDER_POSTGRES_DB}
      POSTGRES_USER: ${ORDER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_PASSWORD}
    expose:
      - "50056"
    ports:
      - "50056:50056"
    volumes:
      - order-data:/var/lib/postgresql/data
    networks:
      - app-network
    command: -p 50056

  deliveryservice:
    image: ${DOCKER_REGISTRY-}deliveryservice
    build:
      context: .
      dockerfile: Services/DeliveryService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: "Development"
      PRODUCT_POSTGRES_HOST: ${DELIVERY_POSTGRES_HOST}
      PRODUCT_POSTGRES_PORT: ${DELIVERY_POSTGRES_PORT}
      PRODUCT_POSTGRES_DB: ${DELIVERY_POSTGRES_DB}
      PRODUCT_POSTGRES_USER: ${DELIVERY_POSTGRES_USER}
      PRODUCT_POSTGRES_PASSWORD: ${DELIVERY_POSTGRES_PASSWORD}
    ports:
      - "50065:50065"
    networks:
      - app-network
    depends_on:
      - delivery_bd

  delivery_bd:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DELIVERY_POSTGRES_DB}
      POSTGRES_USER: ${DELIVERY_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DELIVERY_POSTGRES_PASSWORD}
    expose:
      - "50066"
    ports:
      - "50066:50066"
    volumes:
      - delivery-data:/var/lib/postgresql/data
    networks:
      - app-network
    command: -p 50066

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - app-network

volumes:
  pg-data:
  pg-admin:
    driver: local
  postgres_data:
  seq-data:
  product-data:
  order-data:
  delivery-data:
  redis-data:
  minio_data:
